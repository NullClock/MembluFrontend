class SimpleSocket{constructor(t){this.id=t.project_id,this.token=t.project_token,this.socketURL="wss://simplesocket.net/socket/v2",this.supportsETF=t.useBinary||"undefined"!=typeof TextEncoder,this.operations={},this.totalMessages=0,this.timeout=12e4,this.remotes={},window.addEventListener("offline",(()=>{this.close("Lost connection.")})),this.connectSocket()}debug(t,e,s){(1==this.showDebug||e)&&(1==this.debugStyle?1==s?console.error("%cSimpleSocket%c "+t,"color: #4F61FF; font-family: Didot, sans-serif; font-weight: 900; font-size: 14px;","color: white"):console.log("%cSimpleSocket%c "+t,"color: #4F61FF; font-family: Didot, sans-serif; font-weight: 900; font-size: 14px;","color: white"):1==s?console.error(t):console.log(t))}send(t,e,s,i){let o=i;null==i&&t&&(this.totalMessages+=1,o=parseInt(t.toString()+this.totalMessages.toString()));let n=[];o&&n.push(o);for(let t=0;t<(e||[]).length;t++)n[t+1]=e[t];if(t>1){let i=[t,e,s];2==t&&(i[3]=this.hash(e[0])),this.operations[o]=i}if(this.socket&&this.socket.readyState==WebSocket.OPEN&&(this.clientID||1==t)){let e=JSON.stringify(n);e=e.substring(1,e.length-1),this.debug("SENT: "+e),1==this.supportsETF&&(e=new TextEncoder("utf-8").encode(e)),this.socket.send(e),null==s&&this.operations[o]&&t<7&&delete this.operations[o]}else this.socket&&this.socket.readyState==WebSocket.CLOSED&&this.closed();return o}handleMessage(t){clearTimeout(this.timeoutTimeout),this.timeoutTimeout=setTimeout((()=>{this.close("Failed to receive PONG message.")}),this.timeout),"object"==typeof t&&(t=new TextDecoder("utf-8").decode(t)),this.debug("RECIEVED: "+t);let e=JSON.parse("["+t+"]");switch(e[0]){case 2:if(null==e[4]){let t=Object.keys(this.operations);for(let s=0;s<t.length;s++){let i=this.operations[t[s]];i&&i[3]==e[1]&&i[2]&&i[2](e[2],e[3])}}else this.remotes[e[4]]&&this.remotes[e[4]](e[2],e[3]);break;case 3:this.operations[e[1]]&&(this.operations[e[1]][2](e[2]),delete this.operations[e[1]]);break;case 1:this.debug("CONNECTED: ClientID: "+e[1]),this.clientID=e[1],this.serverID=e[2],this.secureID=e[1]+"-"+e[3],this.onopen&&this.onopen();let t=Object.keys(this.operations);for(let e=0;e<t.length;e++){let s={...this.operations[t[e]]};delete this.operations[t[e]],this.send(s[0],s[1],s[2],parseInt(t[e]))}break;case 0:this.debug(e[2],!0,!0),this.operations[e[1]]&&delete this.operations[e[1]],1==e[3]?this.expectClose=!0:this.operations[e[3]]&&(this.operations[e[3]][3]=this.hash(e[4]),this.operations[e[3]][1][0]=e[4])}}connectSocket(){let t=()=>{this.debug("CONNECTING");let t="";1==this.supportsETF&&(t="?en=etf"),this.close("Closing old socket connection."),this.socket=new WebSocket(this.socketURL+t),1==this.supportsETF&&(this.socket.binaryType="arraybuffer"),this.socket.onopen=()=>{this.socket.onmessage=t=>{this.handleMessage(t.data),this.intervalTryConnect&&(clearInterval(this.intervalTryConnect),this.intervalTryConnect=null)},this.socket.onclose=()=>{this.closed()},this.send(1,[this.id,this.token])}};clearInterval(this.intervalTryConnect),this.intervalTryConnect=setInterval(t,1e4),t()}close(t){null!=this.socket&&this.socket.close(1e3,t)}closed(){null!=this.socket&&null!=this.clientID&&(this.socket=null,this.debug("CONNECTION LOST"),this.clientID=null,this.serverID=null,this.secureID=null,this.onclose&&this.onclose(),1!=this.expectClose&&this.connectSocket())}hash(t){"object"==typeof t&&(t=JSON.stringify(t));let e=0;for(let s=0;s<t.length;s++){e=(e<<5)-e+t.charCodeAt(s),e&=e}return e}setDefaultConfig(t){this.debug("NEW CONFIG: Config: "+JSON.stringify(t)),this.defaultConfig&&this.operations[this.defaultConfig]&&delete this.operations[this.defaultConfig],this.defaultConfig=this.send(7,[t])}setDisconnectEvent(t,e,s){this.debug("Setting Disconnect Event: Filter: "+JSON.stringify(t)+" | Data: "+JSON.stringify(e)+" | Config: "+JSON.stringify(s));let i=[t,e];s&&(i[2]=s),this.disconnectEvent&&this.operations[this.disconnectEvent]&&(delete this.operations[this.disconnectEvent],this.disconnectEvent=null),t?this.disconnectEvent=this.send(8,i):delete this.operations[this.send(8,[null])]}subscribe(t,e,s){this.debug("SUBSCRIBING: Filter: "+JSON.stringify(t));let i=[t];s&&(i[1]=s),e.length<2&&(null==s?i[1]=!0:i[2]=!0);let o=this.send(2,i,e);return{id:o,edit:t=>{if(this.operations[o]){let e=this.hash(t);this.operations[o][3]!=e&&(this.debug("EDITING: Filter: "+JSON.stringify(t)),this.operations[o][1][0]=t,this.send(4,[o,this.operations[o][3],t]),this.operations[o][3]=e)}},close:()=>{this.operations[o]&&(this.debug("CLOSING "+o),this.send(5,[this.operations[o][3]]),delete this.operations[o])}}}publish(t,e,s){this.debug("PUBLISHING: Filter: "+JSON.stringify(t)+" | Data: "+JSON.stringify(e));let i=[t,e];s&&(i[2]=s),this.send(3,i)}}